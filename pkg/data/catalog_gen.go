// Code generated by scripts/export_provider_catalog.rb; DO NOT EDIT.
package data

func ptr[T any](v T) *T { return &v }

type StructCatalog struct {
	Name string
	FixedSource *string
	AllowedEvents []string
}

type Catalog struct {
	Keys map[string]string
	Structs map[string]StructCatalog
}

var CatalogData = Catalog{
	Keys: map[string]string{
		"source": "src",
		"event": "evt",
		"timestamp": "ts",
		"level": "lvl",
		"message": "msg",
		"data": "data",
		"path": "path",
		"http_method": "method",
		"source_ip": "source_ip",
		"user_agent": "user_agent",
		"referer": "referer",
		"request_id": "request_id",
		"format": "format",
		"controller": "controller",
		"action": "action",
		"status": "status",
		"duration": "duration",
		"view": "view",
		"db": "db",
		"params": "params",
		"blocked_host": "blocked_host",
		"blocked_hosts": "blocked_hosts",
		"client_ip": "client_ip",
		"x_forwarded_for": "x_forwarded_for",
		"to": "to",
		"from": "from",
		"subject": "subject",
		"err_class": "err_class",
		"backtrace": "backtrace",
		"job_id": "job_id",
		"job_class": "job_class",
		"queue_name": "queue_name",
		"arguments": "arguments",
		"retry_count": "retry_count",
		"process_id": "pid",
		"thread_id": "tid",
		"context": "ctx",
		"checksum": "checksum",
		"exist": "exist",
		"url": "url",
		"prefix": "prefix",
		"range": "range",
		"storage": "storage",
		"operation": "op",
		"file_id": "file_id",
		"filename": "filename",
		"mime_type": "mime_type",
		"size": "size",
		"metadata": "metadata",
		"location": "location",
		"upload_options": "upload_opts",
		"download_options": "download_opts",
		"options": "opts",
		"uploader": "uploader",
		"model": "model",
		"mount_point": "mount_point",
		"sql": "sql",
		"name": "name",
		"row_count": "row_count",
		"connection_adapter": "connection_adapter",
		"bind_params": "bind_params",
		"database_name": "database_name",
		"connection_pool_size": "connection_pool_size",
		"active_connections": "active_connections",
		"operation_type": "operation_type",
		"table_names": "table_names",
	},
	Structs: map[string]StructCatalog{
		"SQL": {Name: "SQL", FixedSource: nil, AllowedEvents: []string{"database"}},
		"Sidekiq": {Name: "Sidekiq", FixedSource: ptr("sidekiq"), AllowedEvents: []string{"log"}},
		"Shrine": {Name: "Shrine", FixedSource: ptr("shrine"), AllowedEvents: []string{"delete", "download", "exist", "metadata", "unknown", "upload"}},
		"Security": {Name: "Security", FixedSource: ptr("security"), AllowedEvents: []string{"blocked_host", "csrf_violation", "ip_spoof"}},
		"Request": {Name: "Request", FixedSource: ptr("rails"), AllowedEvents: []string{"request"}},
		"Plain": {Name: "Plain", FixedSource: nil, AllowedEvents: []string{"log"}},
		"GoodJob": {Name: "GoodJob", FixedSource: ptr("job"), AllowedEvents: []string{"enqueue", "error", "finish", "log", "schedule", "start"}},
		"Error": {Name: "Error", FixedSource: nil, AllowedEvents: []string{"error"}},
		"ActiveJob": {Name: "ActiveJob", FixedSource: ptr("job"), AllowedEvents: []string{"enqueue", "finish", "schedule", "start"}},
		"ActiveStorage": {Name: "ActiveStorage", FixedSource: ptr("storage"), AllowedEvents: []string{"delete", "download", "exist", "metadata", "stream", "unknown", "upload", "url"}},
		"ActionMailer": {Name: "ActionMailer", FixedSource: ptr("mailer"), AllowedEvents: []string{"delivered", "delivery"}},
		"CarrierWave": {Name: "CarrierWave", FixedSource: ptr("carrierwave"), AllowedEvents: []string{"delete", "download", "exist", "metadata", "unknown", "upload"}},
	},
}
