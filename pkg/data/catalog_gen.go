// Code generated by scripts/export_provider_catalog.rb; DO NOT EDIT.
package data

func ptr[T any](v T) *T { return &v }

type StructCatalog struct {
	Name string
	FixedSource *string
	AllowedEvents []string
}

type Catalog struct {
	Keys map[string]string
	Structs map[string]StructCatalog
}

var CatalogData = Catalog{
	Keys: map[string]string{
		"action": "action",
		"active_connections": "active_count",
		"adapter": "adapter",
		"address": "addr",
		"ahoy_event": "ahoy_event",
		"allow_ip_hosts": "allow_ip_hosts",
		"allowed_hosts": "allowed_hosts",
		"arguments": "arguments",
		"attachment_count": "attachments",
		"attempt": "attempt",
		"backtrace": "backtrace",
		"bind_params": "bind_params",
		"blocked_host": "blocked_host",
		"blocked_hosts": "blocked_hosts",
		"checksum": "checksum",
		"client_ip": "client_ip",
		"connection_pool_size": "pool_size",
		"context": "ctx",
		"controller": "controller",
		"cron_key": "cron_key",
		"data": "data",
		"database": "db",
		"database_name": "db_name",
		"download_options": "download_opts",
		"duration_ms": "duration_ms",
		"enqueue_caller": "enqueue_caller",
		"environment": "environment",
		"error_class": "error_class",
		"error_message": "error_message",
		"event": "evt",
		"exception_executions": "exception_executions",
		"execution_time": "execution_time",
		"executions": "executions",
		"exist": "exist",
		"extension": "ext",
		"file": "file",
		"file_id": "file_id",
		"filename": "filename",
		"finished_at": "finished_at",
		"format": "format",
		"from": "from",
		"http_method": "method",
		"job_class": "job_class",
		"job_id": "job_id",
		"level": "lvl",
		"listening_addresses": "listening_addresses",
		"location": "location",
		"mailer_action": "mailer_action",
		"mailer_class": "mailer",
		"max_threads": "max_threads",
		"message": "msg",
		"message_id": "msg_id",
		"metadata": "metadata",
		"mime_type": "mime_type",
		"min_threads": "min_threads",
		"mode": "mode",
		"model": "model",
		"mount_point": "mount_point",
		"name": "name",
		"operation": "op",
		"operation_type": "op_type",
		"options": "opts",
		"params": "params",
		"path": "path",
		"prefix": "prefix",
		"priority": "priority",
		"process_id": "pid",
		"properties": "properties",
		"provider_job_id": "provider_job_id",
		"puma_codename": "puma_codename",
		"puma_version": "puma_version",
		"queue_name": "queue_name",
		"range": "range",
		"referer": "referer",
		"request_id": "request_id",
		"resource_class": "resource_class",
		"result": "result",
		"retries": "retries",
		"retry_count": "retry_count",
		"row_count": "row_count",
		"ruby_version": "ruby_version",
		"run_time": "run_time",
		"scheduled_at": "scheduled_at",
		"serializer": "serializer",
		"size": "size",
		"snapshot": "snapshot",
		"source": "src",
		"source_ip": "source_ip",
		"sql": "sql",
		"started_at": "started_at",
		"status": "status",
		"storage": "storage",
		"store_path": "store_path",
		"subject": "subject",
		"table_names": "table_names",
		"thread_id": "tid",
		"timestamp": "ts",
		"to": "to",
		"upload_options": "upload_opts",
		"uploader": "uploader",
		"url": "url",
		"user_agent": "user_agent",
		"vars": "vars",
		"version": "version",
		"view": "view",
		"wait_ms": "wait_ms",
		"wait_time": "wait_time",
		"x_forwarded_for": "x_forwarded_for",
	},
	Structs: map[string]StructCatalog{
		"ActionMailer": {Name: "ActionMailer", FixedSource: ptr("mailer"), AllowedEvents: []string{"delivered", "delivery", "error"}},
		"ActiveJob": {Name: "ActiveJob", FixedSource: ptr("job"), AllowedEvents: []string{"enqueue", "finish", "schedule", "start"}},
		"ActiveModelSerializers": {Name: "ActiveModelSerializers", FixedSource: ptr("rails"), AllowedEvents: []string{"generate"}},
		"ActiveStorage": {Name: "ActiveStorage", FixedSource: ptr("storage"), AllowedEvents: []string{"delete", "download", "exist", "metadata", "stream", "upload", "url"}},
		"Ahoy": {Name: "Ahoy", FixedSource: ptr("app"), AllowedEvents: []string{"log"}},
		"CarrierWave": {Name: "CarrierWave", FixedSource: ptr("carrierwave"), AllowedEvents: []string{"delete", "download", "upload"}},
		"Dotenv": {Name: "Dotenv", FixedSource: ptr("dotenv"), AllowedEvents: []string{"load", "restore", "save", "update"}},
		"Error": {Name: "Error", FixedSource: nil, AllowedEvents: []string{"error"}},
		"GoodJob": {Name: "GoodJob", FixedSource: ptr("job"), AllowedEvents: []string{"enqueue", "error", "finish", "log", "schedule", "start"}},
		"Plain": {Name: "Plain", FixedSource: ptr("app"), AllowedEvents: []string{"log"}},
		"Puma": {Name: "Puma", FixedSource: ptr("puma"), AllowedEvents: []string{"shutdown", "start"}},
		"Request": {Name: "Request", FixedSource: ptr("rails"), AllowedEvents: []string{"request"}},
		"SQL": {Name: "SQL", FixedSource: ptr("app"), AllowedEvents: []string{"database"}},
		"Security": {Name: "Security", FixedSource: ptr("security"), AllowedEvents: []string{"blocked_host", "csrf_violation", "ip_spoof"}},
		"Shrine": {Name: "Shrine", FixedSource: ptr("shrine"), AllowedEvents: []string{"delete", "download", "exist", "metadata", "upload"}},
		"Sidekiq": {Name: "Sidekiq", FixedSource: ptr("sidekiq"), AllowedEvents: []string{"log"}},
	},
}
